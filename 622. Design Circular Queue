class MyCircularQueue {
private:
    vector<int> circularQueue;
    int headPos;
    int tailPos;
    int size;
    
public:
    /** Initialize your data structure here. Set the size of the queue to be k. */
    MyCircularQueue(int k) {
        circularQueue.resize(k);
        headPos=-1;
        tailPos=-1;
        size=k;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    bool enQueue(int value) {     
        //the queue is full
        if(isFull())
            return false;
        
        if(headPos==-1)
            headPos=0;
        
        tailPos=(tailPos + 1)%size;
        circularQueue[tailPos] = value;
        
        return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    bool deQueue() {
        if(isEmpty())
            return false;
        
        circularQueue[headPos]=-1;
        
        if(headPos==tailPos){
            headPos=-1;
            tailPos=-1;
            return true;
        }
        
        headPos = (headPos + 1) % size;
        
        return true;
    }
    
    /** Get the front item from the queue. */
    int Front() {
        if (isEmpty()) {
            return -1;
        }
        return circularQueue[headPos];
    }
    
    /** Get the last item from the queue. */
    int Rear() {
        if (isEmpty()) {
            return -1;
        }
        return circularQueue[tailPos];
    }
    
    /** Checks whether the circular queue is empty or not. */
    bool isEmpty() {
        
         return headPos == -1;
    }
    
    /** Checks whether the circular queue is full or not. */
    bool isFull() {
        return (tailPos + 1)%size == headPos;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
