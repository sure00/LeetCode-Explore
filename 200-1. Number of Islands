class Solution {
public:
   
    int numIslands(vector<vector<char>>& grid) {
        if(grid.size() ==0 || grid[0].size() ==0)
            return 0;
            
        int m= grid.size(), n= grid[0].size(), ret=0;
        
        vector<vector<bool>> visited(m, vector<bool>(n));
        
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='0' || visited[i][j]) continue;
                
                dfs(i, j, grid, visited);
                ret++;
                
            }
        }
                                    
        return ret;
    }
    
    void dfs(int x, int y, vector<vector<char>>& grid, vector<vector<bool>> &visited){
        
        if(x <0 || x>= grid.size() || y < 0 || y >=grid[0].size() || grid[x][y]=='0'||visited[x][y] )
            return;
        else {
            //grid[x][y]='0';
            visited[x][y]=true;
            
            dfs(x-1, y, grid, visited);
            dfs(x+1, y, grid, visited);
            dfs(x, y-1, grid, visited);
            dfs(x, y+1, grid, visited);            
        }
    }
};
