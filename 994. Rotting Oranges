class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        //collect the rotten orange position and save in a queue
        //using DFS to go through each adjacent orange for each element in the queue
        //pop all rotten orange and  put the new rotten orange in the queue and repeat until the queue is empty
        
        
        int row = grid.size();
        int col = grid[0].size();
        int minutes=0;
        int newX=0;
        int newY=0;
        queue<pair<int, int>> myqueue;
        vector<int> dir_row = {-1,0,1,0};
        vector<int> dir_col = {0,1,0,-1};
        
        //1. collect the position of rotten orange and put in the queu
        for(int i=0;i<row;i++)
            for(int j=0;j< col; j++) {
                // rotten orange and push position into the queue
                if(grid[i][j] == 2) {
                    myqueue.push(make_pair(i, j));
                }
            }
        
        //2. using DFS to go through each adjacent orange for each element in the queue
        while(!myqueue.empty()) {
            
            int numRotten = myqueue.size();
            
            // go through each rotten orange and check each adjacent ornage to rotten 
            for(int i=0;i< numRotten;i++) {
                int x = myqueue.front().first;
                int y = myqueue.front().second;
                
                myqueue.pop();
                
                for(int j=0;j<4;j++) {
                    newX = x + dir_row[j];
                    newY = y + dir_col[j];
                    
                    if(newX >=0 && newX < row && newY >= 0 && newY < col && grid[newX][newY] == 1) {
                        cout<< "new rotten orange " << newX << newY  <<endl;
                        myqueue.push(make_pair(newX, newY));
                        grid[newX][newY] = 2;
                    }
                }
            }
            if(myqueue.empty()) {
                break;
            }
            minutes++;
            
        }
        
        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++)
                if(grid[i][j] == 1)
                    return -1;
        return minutes;
    }
};
