class Solution {
public:
    void bfs(int i, int j, vector<vector<char>>& grid) {
        vector<vector<int>> dir{{0, 1},{0,-1},{1,0},{-1,0}};
        queue<pair<int, int>> q;
        q.push({i, j});
        
        while(!q.empty()){
            int i=q.front().first;
            int j=q.front().second; 
            q.pop();
            
            for(int k=0;k<dir.size();k++){
                int x=i+dir[k][0];
                int y=j+dir[k][1];            
            
                if(x<0 || x >= grid.size() || y<0 ||y>=grid[0].size() || grid[x][y]=='0')
                    continue;
                grid[x][y]='0';
                q.push({x, y});
            }
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int ret=0;
        
        for(int i=0;i<grid.size();i++)
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]=='1'){
                    grid[i][j]='0';
                    bfs(i, j, grid);
                    ret++;
                }
            }
        return ret;
    }
};
